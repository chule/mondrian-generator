{"version":3,"sources":["Mondrian.js","App.js","serviceWorker.js","index.js"],"names":["Mondrian","data","x0","x1","y0","y1","children","fill","white","colorArr","Math","floor","random","length","randomColor","x","y","width","height","stroke","strokeWidth","map","d","i","key","App","useState","setData","useEffect","generateData","randomNum","ceil","Array","from","n","value","d3","size","padding","round","sum","sort","a","b","treemap","className","onClick","style","margin","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uPAuDeA,G,MArDE,SAAXA,EAAY,GAAc,IAAZC,EAAW,EAAXA,KAuBVC,EAA6BD,EAA7BC,GAAIC,EAAyBF,EAAzBE,GAAIC,EAAqBH,EAArBG,GAAIC,EAAiBJ,EAAjBI,GAAIC,EAAaL,EAAbK,SACxB,OACE,oCACE,0BACEC,KA1Bc,WAClB,IAGMC,EAAQ,UAGRC,EAAW,CANL,UACC,UACE,UAQbD,EANY,UAQZA,EACAA,EACAA,EACAA,GAGF,OAAOC,EADSC,KAAKC,MAAMD,KAAKE,SAAWH,EAASI,SAQ1CC,GACNC,EAAGb,EACHc,EAAGZ,EACHa,MAAOd,EAAKD,EACZgB,OAAQb,EAAKD,EACbe,OAAO,QACPC,YAAY,OAGbd,GACCA,EAASe,KAAI,SAACC,EAAGC,GACf,OACE,kBAACvB,EAAD,CACEwB,IAAKD,EACLR,EAAGb,EACHc,EAAGZ,EACHa,MAAOd,EAAKD,EACZgB,OAAQb,EAAKD,EACbH,KAAMqB,UCYLG,MAtDf,WAAgB,IAAD,EACWC,mBAAS,IADpB,mBACNzB,EADM,KACA0B,EADA,KAGbC,qBAAU,WACRC,MACC,IAEH,IAAMA,EAAe,WACnB,IAAIC,EAAY,kBAAMpB,KAAKqB,KAAqB,GAAhBrB,KAAKE,WAgB/BX,EAAO,CACXK,SAhBW0B,MAAMC,KAAKD,MAAMF,MAgBXT,KAAI,SAAAC,GACnB,MAAO,CACLhB,SAAU0B,MAAMC,KAAKD,MAAMF,MAAcT,KAAI,SAAAa,GAAC,MAAK,CACjDC,MAAO,YAMfR,EAvBgB,SAAA1B,GAAI,OAClBmC,MAGGC,KAAK,CAACpB,EAAOC,IACboB,QAAQ,GACRC,OAAM,EALTH,CAMEA,IACanC,GACVuC,KAAI,SAAAlB,GAAC,OAAIA,EAAEa,SACXM,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAER,MAAQO,EAAEP,UAa1BS,CAAQ3C,KAGdgB,EAAQ,IACRC,EAAS,IAEb,OACE,yBAAK2B,UAAU,OACb,gCACE,kDACA,4BAAQC,QAAS,kBAAMjB,MAAvB,sBAGF,yBAAKZ,MAAOA,EAAOC,OAAQA,EAAQ6B,MAAO,CAAEC,OAAQ,WAClD,kBAAC,EAAD,CAAU/C,KAAMA,OCzCJgD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ca051284.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Mondrian = ({ data }) => {\n  const randomColor = () => {\n    const red = \"#C31D24\";\n    const blue = \"#2D4070\";\n    const yellow = \"#FBCA0E\";\n    const white = \"#FFFFFF\";\n    const black = \"#000000\";\n\n    const colorArr = [\n      red,\n      blue,\n      yellow,\n      white,\n      black,\n      white,\n      white,\n      white,\n      white\n    ];\n    const randInd = Math.floor(Math.random() * colorArr.length);\n    return colorArr[randInd];\n  };\n\n  const { x0, x1, y0, y1, children } = data;\n  return (\n    <>\n      <rect\n        fill={randomColor()}\n        x={x0}\n        y={y0}\n        width={x1 - x0}\n        height={y1 - y0}\n        stroke=\"black\"\n        strokeWidth=\"10\"\n      />\n\n      {children &&\n        children.map((d, i) => {\n          return (\n            <Mondrian\n              key={i}\n              x={x0}\n              y={y0}\n              width={x1 - x0}\n              height={y1 - y0}\n              data={d}\n            />\n          );\n        })}\n    </>\n  );\n};\n\nexport default Mondrian;\n","import React, { useState, useEffect } from \"react\";\nimport * as d3 from \"d3\";\nimport \"./App.css\";\nimport Mondrian from \"./Mondrian\";\n\nfunction App() {\n  const [data, setData] = useState({});\n\n  useEffect(() => {\n    generateData();\n  }, []);\n\n  const generateData = () => {\n    var randomNum = () => Math.ceil(Math.random() * 10);\n    var level0 = Array.from(Array(randomNum()));\n\n    const treemap = data =>\n      d3\n        .treemap()\n        // .tile(d3.treemapBinary)\n        .size([width, height])\n        .padding(1)\n        .round(true)(\n        d3\n          .hierarchy(data)\n          .sum(d => d.value)\n          .sort((a, b) => b.value - a.value)\n      );\n\n    const data = {\n      children: level0.map(d => {\n        return {\n          children: Array.from(Array(randomNum())).map(n => ({\n            value: 50\n          }))\n        };\n      })\n    };\n\n    setData(treemap(data));\n  };\n\n  var width = 800;\n  var height = 600;\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Mondrian generator</h1>\n        <button onClick={() => generateData()}>Click to generate</button>\n      </header>\n\n      <svg width={width} height={height} style={{ margin: \"0 auto\" }}>\n        <Mondrian data={data} />\n      </svg>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}